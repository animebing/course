import mxnet as mx


def front_end(num_class=19):
    data = mx.sym.Variable('data')
    # VGG part
    # group 1
    conv1_1 = mx.sym.Convolution(data=data, kernel=(3, 3),num_filter=64, name='conv1_1', workspace=10240)
    relu1_1= mx.sym.Activation(data=conv1_1, act_type='relu', name='relu1_1')
    conv1_2 = mx.sym.Convolution(data=relu1_1, kernel=(3, 3), num_filter=64, name='conv1_2', workspace=10240)
    relu1_2= mx.sym.Activation(data=conv1_2, act_type='relu', name='relu1_2')
    pool1 = mx.sym.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2),  stride=(2, 2), name='pool1')

    # group 2
    conv2_1 = mx.sym.Convolution(data=pool1, kernel=(3, 3),num_filter=128, name='conv2_1', workspace=10240)
    relu2_1= mx.sym.Activation(data=conv2_1, act_type='relu', name='relu2_1')
    conv2_2 = mx.sym.Convolution(data=relu2_1, kernel=(3, 3), num_filter=128, name='conv2_2', workspace=10240)
    relu2_2= mx.sym.Activation(data=conv2_2, act_type='relu', name='relu2_2')
    pool2 = mx.sym.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2),  stride=(2, 2), name='pool2')

    # group 3
    conv3_1 = mx.sym.Convolution(data=pool2, kernel=(3, 3),num_filter=256, name='conv3_1', workspace=10240)
    relu3_1= mx.sym.Activation(data=conv3_1, act_type='relu', name='relu3_1')
    conv3_2 = mx.sym.Convolution(data=relu3_1, kernel=(3, 3), num_filter=256, name='conv3_2', workspace=10240)
    relu3_2= mx.sym.Activation(data=conv3_2, act_type='relu', name='relu3_2')
    conv3_3 = mx.sym.Convolution(data=relu3_2, kernel=(3, 3), num_filter=256, name='conv3_3', workspace=10240)
    relu3_3= mx.sym.Activation(data=conv3_3, act_type='relu', name='relu3_3')
    pool3 = mx.sym.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2),  stride=(2, 2), name='pool3')

    # group 4 without pool4
    conv4_1 = mx.sym.Convolution(data=pool3, kernel=(3, 3),num_filter=512, name='conv4_1', workspace=10240)
    relu4_1= mx.sym.Activation(data=conv4_1, act_type='relu', name='relu4_1')
    conv4_2 = mx.sym.Convolution(data=relu4_1, kernel=(3, 3), num_filter=512, name='conv4_2', workspace=10240)
    relu4_2= mx.sym.Activation(data=conv4_2, act_type='relu', name='relu4_2')
    conv4_3 = mx.sym.Convolution(data=relu4_2, kernel=(3, 3), num_filter=512, name='conv4_3', workspace=10240)
    relu4_3= mx.sym.Activation(data=conv4_3, act_type='relu', name='relu4_3')

    # dilation part
    conv5_1 = mx.sym.Convolution(data=relu4_3, kernel=(3, 3), num_filter=512, dilate=(2, 2), name='conv5_1', workspace=10240)
    relu5_1 = mx.sym.Activation(data=conv5_1, act_type='relu', name='relu5_1')
    conv5_2 = mx.sym.Convolution(data=relu5_1, kernel=(3, 3), num_filter=512, dilate=(2, 2), name='conv5_2', workspace=10240)
    relu5_2 = mx.sym.Activation(data=conv5_2, act_type='relu', name='relu5_2')
    conv5_3 = mx.sym.Convolution(data=relu5_2, kernel=(3, 3), num_filter=512, dilate=(2, 2), name='conv5_3', workspace=10240)
    relu5_3 = mx.sym.Activation(data=conv5_3, act_type='relu', name='relu5_3')

    fc6 = mx.sym.Convolution(data=relu5_3, kernel=(7, 7), num_filter=4096, dilate=(4, 4), name='fc6', workspace=10240)
    relu6 = mx.sym.Activation(data=fc6, act_type='relu', name='relu6')
    drop6 = mx.sym.Dropout(data=relu6, p=0.5, name='drop6')
    fc7 = mx.sym.Convolution(data=drop6, kernel=(1, 1), num_filter=4096, name='fc7', workspace=10240)
    relu7 = mx.sym.Activation(data=fc7, act_type='relu', name='relu7')
    drop7 = mx.sym.Dropout(data=relu7, p=0.5, name='drop7')

    final = mx.sym.Convolution(data=drop7, kernel=(1, 1), num_filter=num_class, name='final', workspace=10240)

    return final

def dilation7(input, num_class):
    ctx_conv1_1 = mx.sym.Convolution(data=input, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_conv1_1', workspace=10240)
    ctx_relu1_1 = mx.sym.Activation(data=ctx_conv1_1, act_type='relu', name='ctx_relu1_1')
    ctx_conv1_2 = mx.sym.Convolution(data=ctx_relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_conv1_2', workspace=10240)
    ctx_relu1_2 = mx.sym.Activation(data=ctx_conv1_2, act_type='relu', name='ctx_relu1_2')

    ctx_conv2_1 = mx.sym.Convolution(data=ctx_relu1_2, kernel=(3, 3), pad=(2, 2), num_filter=num_class, dilate=(2, 2), name='ctx_conv2_1', workspace=10240)
    ctx_relu2_1 = mx.sym.Activation(data=ctx_conv2_1, act_type='relu', name='ctx_relu2_1')

    ctx_conv3_1 = mx.sym.Convolution(data=ctx_relu2_1, kernel=(3, 3), pad=(4, 4), num_filter=num_class, dilate=(4, 4), name='ctx_conv3_1', workspace=10240)
    ctx_relu3_1 = mx.sym.Activation(data=ctx_conv3_1, act_type='relu', name='ctx_relu3_1')

    ctx_conv4_1 = mx.sym.Convolution(data=ctx_relu3_1, kernel=(3, 3), pad=(8, 8), num_filter=num_class, dilate=(8, 8), name='ctx_conv4_1', workspace=10240)
    ctx_relu4_1 = mx.sym.Activation(data=ctx_conv4_1, act_type='relu', name='ctx_relu4_1')

    ctx_fc1 = mx.sym.Convolution(data=ctx_relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_fc1', workspace=10240)
    ctx_fc1_relu1 = mx.sym.Activation(data=ctx_fc1, act_type='relu', name='ctx_fc1_relu1')

    ctx_final = mx.sym.Convolution(data=ctx_fc1_relu1, kernel=(1, 1), num_filter=num_class, name='ctx_final', workspace=10240)

    return ctx_final

def dilation8(input, num_class):
    ctx_conv1_1 = mx.sym.Convolution(data=input, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_conv1_1', workspace=10240)
    ctx_relu1_1 = mx.sym.Activation(data=ctx_conv1_1, act_type='relu', name='ctx_relu1_1')
    ctx_conv1_2 = mx.sym.Convolution(data=ctx_relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_conv1_2', workspace=10240)
    ctx_relu1_2 = mx.sym.Activation(data=ctx_conv1_2, act_type='relu', name='ctx_relu1_2')

    ctx_conv2_1 = mx.sym.Convolution(data=ctx_relu1_2, kernel=(3, 3), pad=(2, 2), num_filter=num_class, dilate=(2, 2), name='ctx_conv2_1', workspace=10240)
    ctx_relu2_1 = mx.sym.Activation(data=ctx_conv2_1, act_type='relu', name='ctx_relu2_1')

    ctx_conv3_1 = mx.sym.Convolution(data=ctx_relu2_1, kernel=(3, 3), pad=(4, 4), num_filter=num_class, dilate=(4, 4), name='ctx_conv3_1', workspace=10240)
    ctx_relu3_1 = mx.sym.Activation(data=ctx_conv3_1, act_type='relu', name='ctx_relu3_1')

    ctx_conv4_1 = mx.sym.Convolution(data=ctx_relu3_1, kernel=(3, 3), pad=(8, 8), num_filter=num_class, dilate=(8, 8), name='ctx_conv4_1', workspace=10240)
    ctx_relu4_1 = mx.sym.Activation(data=ctx_conv4_1, act_type='relu', name='ctx_relu4_1')

    ctx_conv5_1 = mx.sym.Convolution(data=ctx_relu4_1, kernel=(3, 3), pad=(16, 16), num_filter=num_class, dilate=(16, 16), name='ctx_conv5_1', workspace=10240)
    ctx_relu5_1 = mx.sym.Activation(data=ctx_conv5_1, act_type='relu', name='ctx_relu5_1')

    ctx_fc1 = mx.sym.Convolution(data=ctx_relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_fc1', workspace=10240)
    ctx_fc1_relu1 = mx.sym.Activation(data=ctx_fc1, act_type='relu', name='ctx_fc1_relu1')

    ctx_final = mx.sym.Convolution(data=ctx_fc1_relu1, kernel=(1, 1), num_filter=num_class, name='ctx_final', workspace=10240)

    return ctx_final


def dilation10(input, num_class):
    ctx_conv1_1 = mx.sym.Convolution(data=input, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_conv1_1', workspace=10240)
    ctx_relu1_1 = mx.sym.Activation(data=ctx_conv1_1, act_type='relu', name='ctx_relu1_1')
    ctx_conv1_2 = mx.sym.Convolution(data=ctx_relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_conv1_2', workspace=10240)
    ctx_relu1_2 = mx.sym.Activation(data=ctx_conv1_2, act_type='relu', name='ctx_relu1_2')

    ctx_conv2_1 = mx.sym.Convolution(data=ctx_relu1_2, kernel=(3, 3), pad=(2, 2), num_filter=num_class, dilate=(2, 2), name='ctx_conv2_1', workspace=10240)
    ctx_relu2_1 = mx.sym.Activation(data=ctx_conv2_1, act_type='relu', name='ctx_relu2_1')

    ctx_conv3_1 = mx.sym.Convolution(data=ctx_relu2_1, kernel=(3, 3), pad=(4, 4), num_filter=num_class, dilate=(4, 4), name='ctx_conv3_1', workspace=10240)
    ctx_relu3_1 = mx.sym.Activation(data=ctx_conv3_1, act_type='relu', name='ctx_relu3_1')

    ctx_conv4_1 = mx.sym.Convolution(data=ctx_relu3_1, kernel=(3, 3), pad=(8, 8), num_filter=num_class, dilate=(8, 8), name='ctx_conv4_1', workspace=10240)
    ctx_relu4_1 = mx.sym.Activation(data=ctx_conv4_1, act_type='relu', name='ctx_relu4_1')

    ctx_conv5_1 = mx.sym.Convolution(data=ctx_relu4_1, kernel=(3, 3), pad=(16, 16), num_filter=num_class, dilate=(16, 16), name='ctx_conv5_1', workspace=10240)
    ctx_relu5_1 = mx.sym.Activation(data=ctx_conv5_1, act_type='relu', name='ctx_relu5_1')

    ctx_conv6_1 = mx.sym.Convolution(data=ctx_relu5_1, kernel=(3, 3), pad=(32, 32), num_filter=num_class, dilate=(32, 32), name='ctx_conv6_1', workspace=10240)
    ctx_relu6_1 = mx.sym.Activation(data=ctx_conv6_1, act_type='relu', name='ctx_relu6_1')

    ctx_conv7_1 = mx.sym.Convolution(data=ctx_relu6_1, kernel=(3, 3), pad=(64, 64), num_filter=num_class, dilate=(64, 64), name='ctx_conv7_1', workspace=10240)
    ctx_relu7_1 = mx.sym.Activation(data=ctx_conv7_1, act_type='relu', name='ctx_relu7_1')

    ctx_fc1 = mx.sym.Convolution(data=ctx_relu7_1, kernel=(3, 3), pad=(1, 1), num_filter=num_class, name='ctx_fc1', workspace=10240)
    ctx_fc1_relu1 = mx.sym.Activation(data=ctx_fc1, act_type='relu', name='ctx_fc1_relu1')

    ctx_final = mx.sym.Convolution(data=ctx_fc1_relu1, kernel=(1, 1), num_filter=num_class, name='ctx_final', workspace=10240)

    return ctx_final


