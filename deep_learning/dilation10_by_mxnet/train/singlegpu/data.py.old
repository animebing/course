# pylint: skip-file
""" file iterator for dilation convolution """

import mxnet as mx
import numpy as np
import sys, os
from mxnet.io import DataIter
from PIL import Image

class FileIter(DataIter):
    """ FileIter object in dilation convolution. Taking a list file to get dataiter.
    Parameters
    ------------
    root_dir: string
        the root dir of image/label lie in
    flist_name: string
        the list file of iamge and label, every line owns the form:
        index \t image_data_path \t image_label_path
    crop_size: int
        randomly crop the input image with crop_size
    data_name: string
        the data name used in symbol, "data"(default data name)
    label_name: string
        the label name used in symbol, "softmax_label"(default label name)
    """
    def __init__(self, root_dir, flist_name,
                crop_size=628, rgb_mean=(117, 117, 117),
                data_name="data",
                label_name="softmax_label",
                margin=186, batch_size=1):
        super(FileIter, self).__init__()
        self.root_dir = root_dir
        self.flist_name = os.path.join(self.root_dir, flist_name)
        self.batch_size = batch_size
        self.mean = np.array(rgb_mean)
        self.crop_size = crop_size
        self.margin = margin
        self.exact_crop = crop_size-2*margin
        assert (crop_size-2*margin)%8 == 0, "The crop size must be a multiple of 8 after removing the margin"
        self.data_name = data_name
        self.label_name = label_name

        self.num_data = len(open(self.flist_name, 'r').readlines())
        self.f = open(self.flist_name, 'r')
        #self.data, self.label = self._read()
        self.cursor = -1
        #self.crop_num = 8
        self.crop_num = 1
    def _read(self):
        """ get two list, each list contains two elements: name and nd.array value """
        _, data_img_name, label_img_name = self.f.readline().strip('\n').split('\t')
        data = {}
        label = {}
        data[self.data_name], label[self.label_name] = self._read_img(data_img_name, label_img_name)
        return (data.items(), label.items())

    def _read_img(self, img_name, label_name):
        img = Image.open(img_name) # the name here is absolute path
        label = Image.open(label_name)
        assert img.size == label.size, "the image size and label size don't match"
        img = np.array(img, dtype=np.float32)  # (h, w, c)
        h, w, _ = img.shape
        label = np.array(label)  # (h, w)
        exact_crop = self.exact_crop
        batch_img = np.zeros((self.crop_num, 3, self.crop_size,self.crop_size))
        batch_label = np.zeros((self.crop_num, exact_crop, exact_crop))
        rand_w = np.random.randint(0, w-exact_crop, self.crop_num)
        rand_h = np.random.randint(0, h-exact_crop, self.crop_num)
        reshape_mean = self.mean.reshape(1, 1, 3)
        for i in xrange(self.crop_num):
            crop_img = img[rand_h[i]:rand_h[i]+exact_crop, rand_w[i]:rand_w[i]+exact_crop, :]
            crop_img -= reshape_mean;
            crop_img = np.transpose(crop_img, (2, 0, 1))
            batch_img[i, :, :, :] = np.lib.pad(crop_img, ((0, 0), (self.margin, self.margin), (self.margin, self.margin)), 'reflect')
            batch_label[i, :, :] = label[rand_h[i]:rand_h[i]+exact_crop, rand_w[i]:rand_w[i]+exact_crop]

        return (batch_img, batch_label)


    @property
    def provide_data(self):
        """ the name and shape of data provided by this iterator """
        # [1] here is batch, here just 1. here we just have one data, len()=1
        return [(self.data_name, (self.crop_num, 3, self.crop_size, self.crop_size))]

    @property
    def provide_label(self):
        return [(self.label_name, (self.crop_num, self.exact_crop, self.exact_crop))]

    def get_batch_size(self):
        return self.crop_num

    def reset(self):
        self.cursor = -1
        self.f.close()
        self.f = open(self.flist_name, 'r')

    def iter_next(self):
        self.cursor += 1
        #if self.cursor < self.num_data-1:
        if self.cursor < self.num_data:
            return True
        else:
            return False

    def next(self):
        """ return one dict which contains "data" and "label" """
        if self.iter_next():
            self.data, self.label = self._read()
            return {self.data_name:self.data[0][1],
                    self.label_name:self.label[0][1]}
        else:
            raise StopIteration   # maybe never be here
